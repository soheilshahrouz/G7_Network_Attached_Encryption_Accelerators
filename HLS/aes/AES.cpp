#include "AES.h"

BYTE cipher_state[4][Nb];

BYTE xtime(BYTE A)
{
	BYTE result=(A<<1);
	if(A&0x80)
		result=result^0x1b;
	return result;
}

BYTE Multiplication(BYTE A,BYTE B)
{
	BYTE temp=B;
	BYTE sum=0;
	char i;
	for(i=0;i<8;i++)
	{
#pragma HLS UNROLL
		if(A&(0x01<<i))
			sum=sum^temp;
		temp=xtime(temp);
	}
	return sum;
}

void Four_Term_Multiplication(const BYTE A[4],BYTE B[4],BYTE OUT[4])
{
	OUT[0]=Multiplication(A[0],B[0])^Multiplication(A[3],B[1])^Multiplication(A[2],B[2])^Multiplication(A[1],B[3]);
	OUT[1]=Multiplication(A[1],B[0])^Multiplication(A[0],B[1])^Multiplication(A[3],B[2])^Multiplication(A[2],B[3]);
	OUT[2]=Multiplication(A[2],B[0])^Multiplication(A[1],B[1])^Multiplication(A[0],B[2])^Multiplication(A[3],B[3]);
	OUT[3]=Multiplication(A[3],B[0])^Multiplication(A[2],B[1])^Multiplication(A[1],B[2])^Multiplication(A[0],B[3]);
}

void SubBytes()
{
#pragma HLS ARRAY_PARTITION variable=cipher_state complete dim=1
#pragma HLS ARRAY_PARTITION variable=cipher_state complete dim=2
	const BYTE S_Box[16*16]={
	0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
	0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
	0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
	0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
	0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
	0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
	0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
	0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
	0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
	0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
	0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
	0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
	0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
	0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
	0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
	0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16};
#pragma HLS ARRAY_PARTITION variable=S_Box complete dim=1

	for(int i=0;i<Nb;i++)
#pragma HLS UNROLL
		for(int j=0;j<Nb;j++)
#pragma HLS UNROLL
			cipher_state[i][j]=S_Box[cipher_state[i][j]];
}

void ShiftRows()
{
	BYTE tp[Nb];
	tp[0]=cipher_state[1][1];tp[1]=cipher_state[1][2];tp[2]=cipher_state[1][3];tp[3]=cipher_state[1][0];
	cipher_state[1][0]=tp[0];cipher_state[1][1]=tp[1];cipher_state[1][2]=tp[2];cipher_state[1][3]=tp[3];
	tp[0]=cipher_state[2][2];tp[1]=cipher_state[2][3];tp[2]=cipher_state[2][0];tp[3]=cipher_state[2][1];
	cipher_state[2][0]=tp[0];cipher_state[2][1]=tp[1];cipher_state[2][2]=tp[2];cipher_state[2][3]=tp[3];
	tp[0]=cipher_state[3][3];tp[1]=cipher_state[3][0];tp[2]=cipher_state[3][1];tp[3]=cipher_state[3][2];
	cipher_state[3][0]=tp[0];cipher_state[3][1]=tp[1];cipher_state[3][2]=tp[2];cipher_state[3][3]=tp[3];
}

void MixColumns()
{
	BYTE temp[4];
	const BYTE A[4]={0x02,0x01,0x01,0x03};
	int i;
	for(i=0;i<Nb;i++)
	{
#pragma HLS UNROLL
		BYTE B[4]={cipher_state[0][i],cipher_state[1][i],cipher_state[2][i],cipher_state[3][i]};
		Four_Term_Multiplication(A,B,temp);
		cipher_state[0][i]=temp[0];cipher_state[1][i]=temp[1];cipher_state[2][i]=temp[2];cipher_state[3][i]=temp[3];
	}
}

void AddRoundKey(BYTE w_bias[4*Nb])
{
#pragma HLS ARRAY_PARTITION variable=w_bias complete dim=1
	for(int i=0;i<4;i++)
#pragma HLS UNROLL
		for(int j=0;j<Nb;j++)
#pragma HLS UNROLL
			cipher_state[i][j]=cipher_state[i][j]^w_bias[i+j*4];
}

void test(BYTE in[6][6],BYTE out[9])
{
	BYTE tp[3][3];
	test_label4:for(int i=0;i<3;i++)
		test_label6:for(int j=0;j<3;j++)
			tp[i][j]=0;
	test_label0:for(int i=0;i<6;i++)
		test_label1:for(int j=0;j<6;j++)
			tp[i/2][j/2]=tp[i/2][j/2]+in[i][j];
	test_label3:for(int i=0;i<3;i++)
		test_label2:for(int j=0;j<3;j++)
			out[3*i+j]=tp[i][j];
}

void aes_cipher(BYTE in[4*Nb],BYTE out[4*Nb],BYTE w[Nr+1][4*Nb])
{
#pragma HLS INTERFACE ap_ctrl_none port=return
#pragma HLS INTERFACE s_axilite port=w
#pragma HLS INTERFACE axis register both port=out
#pragma HLS INTERFACE axis register both port=in
#pragma HLS ARRAY_PARTITION variable=w complete dim=2
	Cipher_label17:for(int i=0;i<Nb;i++)
		Cipher_label16:for(int j=0;j<4;j++)
			cipher_state[j][i]=in[j+4*i];

	AddRoundKey(w[0]);
	
	Cipher_label13:for(int round=1;round<=Nr-1;round++)
	{
		SubBytes();
		ShiftRows();
		MixColumns();
		AddRoundKey(w[round]);
	}

	SubBytes();
	ShiftRows();
	AddRoundKey(w[Nr]);

	Cipher_label14:for(int i=0;i<Nb;i++)
		Cipher_label15:for(int j=0;j<4;j++)
			out[j+4*i]=cipher_state[j][i];
}

void DispArray(char *Arrayname,BYTE *array,int height,int width)
{
	printf(Arrayname);
	printf(":\n");
	int i,j;
	for(i=0;i<height;i++)
	{
		for(j=0;j<width;j++)
			printf("%02x  ",array[i*width+j]);
		printf("\n");
	}
	printf("\n");
}
